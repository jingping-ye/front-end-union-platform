(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{1049:function(t,a,s){"use strict";s.r(a);var e=s(112),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"有状态组件与无状态组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有状态组件与无状态组件"}},[t._v("#")]),t._v(" 有状态组件与无状态组件")]),t._v(" "),s("h2",{attrs:{id:"有状态组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有状态组件"}},[t._v("#")]),t._v(" 有状态组件")]),t._v(" "),s("blockquote",[s("p",[t._v("有状态组件，即一个组件中存在state,该组件需要与用户进行交互")])]),t._v(" "),s("h2",{attrs:{id:"无状态组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无状态组件"}},[t._v("#")]),t._v(" 无状态组件")]),t._v(" "),s("blockquote",[s("p",[t._v("无状态组件，即一个组件中不包含state。即该组件只用于显示，不用与用户交互(react中，state只有在存在用户交互行为下才使用)")])]),t._v(" "),s("p",[t._v("当一个组件是无状态组件时，我们只要根据输入进行输出，这时，我们使用函数式语法更好。实际应用中，我们应该多多将组件拆为无状态组件。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TestComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("p",[t._v("在react，将"),s("code",[t._v("ui")]),t._v("看成一个个组件。即存在以下公式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("UI = Component(props,state)\n")])])]),s("p",[t._v("因此，在react，遵循单一职能的原则，"),s("code",[t._v("ui")]),t._v("将会被拆分成一个一个的组件。而在拆分的过程中，如果一个组件是无状态组件，由于无状态组件只关注"),s("code",[t._v("UI")]),t._v("，而不用关心组件状态，所以更加容易复用。我们优先采用函数式的方法创建组件。")])])}),[],!1,null,null,null);a.default=r.exports}}]);