(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{1057:function(n,s,t){"use strict";t.r(s);var e=t(112),r=Object(e.a)({},(function(){var n=this.$createElement,s=this._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"react-js-结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-js-结构"}},[this._v("#")]),this._v(" react.js 结构")]),this._v(" "),s("blockquote",[s("p",[this._v("核心 react.js 结构")])]),this._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("-- 安装\n-- createClass与class的不同\n-- 生命周期\n-- jsx\n    |-- 写法\n    |-- 空格\n    |-- 注释\n    |-- 展开属性\n-- 界面渲染\n    |-- 自定义属性\n    |-- style和class\n        |-- 在html文件中使用\n        |-- 在js文件中使用\n            |-- 小驼峰法\n            |-- 浏览器前缀，除了ms浏览器外，开头全部大写\n    |-- 条件渲染\n    |-- 列表渲染\n        |-- 避免:使用数组索引作为key\n        |-- 避免:在dom元素上展开props对象\n-- 事件\n    |-- 合成事件\n        |-- 小驼峰法\n        |-- 绑定方法与手动绑定\n            |-- 是否需要bind\n            |-- 能够传递参数\n            |-- 何时手动绑定\n    |-- 原生事件\n        |-- addEventListner和removeEventListner\n-- 表单\n    |-- 输入框(单行与多行)、单选框与复选框、选择器、\n-- 组件\n    |-- 组件的通信:props和state(如何实现传值)\n        |-- props\n            |-- 默认props\n            |-- props 类型检查\n                |-- 具体参考官网，官网很详细\n                |-- 通用校验\n                |-- 校验数组或者对象的元素\n                |-- 是否必传\n            |-- 函数共享\n            |-- 通过props控制子组件执行不同的方法\n            |-- 快速接收props:新闻列表\n            |-- props.children\n        |-- state\n            |-- 什么数据需要使用state声明\n            |-- setState时会发生什么\n            |-- setState 同步和异步\n                |-- 何时同步、何时异步\n                |-- 如何解决异步造成的影响\n    |-- 组件的事件:父子事件调用\n    |-- 组件的生命周期:对应操作\n    |-- 分类\n        |-- 有状态组件和无状态组件\n        |-- 受控组件和自由组件\n            |-- 受控组件:组件渲染出的状态与它的value或checkd prop相对应\n            |-- 自由组件(非受控组件):一个组件没有value和props，往往需要使用refs控制\n    |-- 理论:组件的设计\n        |-- 考虑是否可以设计成无状态组件:无状态组件关注于ui的变化，更容易被复用\n        |-- 避免使用反模式\n            |-- 使用props修改状态\n            |-- 直接修改状态\n            |-- 使用非受控组件\n            |-- 跨级或者多级通信\n\n    |-- context\n    |-- 高阶组件\n        |-- 传参\n    |-- 子组件操作父组件\n    |-- 其他\n        |-- 组合与继承\n        |-- 错误处理\n        |-- protals\n    |-- 条件渲染与组件\n-- refs\n    |-- 父组件操作子组件\n    |-- 转发\n-- 操作DOM\n-- fragments\n-- 性能优化\n    |-- 性能检测\n    |-- 组件性能优化\n-- 动画与矢量图形\n    |-- css动画\n    |-- js动画\n-- minix\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);